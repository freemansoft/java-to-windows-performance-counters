// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by jni4net. See http://jni4net.sourceforge.net/ 
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

package freemansoft.performancecounters;

/**
 * Java proxy for the C# WindowsPerformanceFacade class.
 * This is a static wrapper for the Windows Performance Counters 
 * that uses an integer key for the category/counter names to speed up performance
 * First get a key for a category/instance/counter combination.
 * Then use that integer key to manipulate the counters with the rest of the API
 */
/**
 * Java proxy for the C# WindowsPerformanceFacade class.
 * This is a static wrapper for the Windows Performance Counters 
 * that uses an integer key for the category/counter names to speed up performance
 * First get a key for a category/instance/counter combination.
 * Then use that integer key to manipulate the counters with the rest of the API
 */
/**
 * Java proxy for the C# WindowsPerformanceFacade class.
 * This is a static wrapper for the Windows Performance Counters 
 * that uses an integer key for the category/counter names to speed up performance
 * First get a key for a category/instance/counter combination.
 * Then use that integer key to manipulate the counters with the rest of the API
 */
/**
 * Java proxy for the C# WindowsPerformanceFacade class.
 * This is a static wrapper for the Windows Performance Counters 
 * that uses an integer key for the category/counter names to speed up performance
 * First get a key for a category/instance/counter combination.
 * Then use that integer key to manipulate the counters with the rest of the API
 */
/**
 * Java proxy for the C# WindowsPerformanceFacade class.
 * This is a static wrapper for the Windows Performance Counters 
 * that uses an integer key for the category/counter names to speed up performance
 * First get a key for a category/instance/counter combination.
 * Then use that integer key to manipulate the counters with the rest of the API
 */
/**
 * Java proxy for the C# WindowsPerformanceFacade class.
 * This is a static wrapper for the Windows Performance Counters 
 * that uses an integer key for the category/counter names to speed up performance
 * First get a key for a category/instance/counter combination.
 * Then use that integer key to manipulate the counters with the rest of the API
 */
/**
 * Java proxy for the C# WindowsPerformanceFacade class.
 * This is a static wrapper for the Windows Performance Counters 
 * that uses an integer key for the category/counter names to speed up performance
 * First get a key for a category/instance/counter combination.
 * Then use that integer key to manipulate the counters with the rest of the API
 */
/**
 * Java proxy for the C# WindowsPerformanceFacade class.
 * This is a static wrapper for the Windows Performance Counters 
 * that uses an integer key for the category/counter names to speed up performance
 * First get a key for a category/instance/counter combination.
 * Then use that integer key to manipulate the counters with the rest of the API
 */
/**
 * Java proxy for the C# WindowsPerformanceFacade class.
 * This is a static wrapper for the Windows Performance Counters 
 * that uses an integer key for the category/counter names to speed up performance
 * First get a key for a category/instance/counter combination.
 * Then use that integer key to manipulate the counters with the rest of the API
 */
/**
 * Java proxy for the C# WindowsPerformanceFacade class.
 * This is a static wrapper for the Windows Performance Counters 
 * that uses an integer key for the category/counter names to speed up performance
 * First get a key for a category/instance/counter combination.
 * Then use that integer key to manipulate the counters with the rest of the API
 */
@net.sf.jni4net.attributes.ClrType
public class WindowsPerformanceFacade extends system.Object {
    
    //<generated-proxy>
    private static system.Type staticType;
    
    protected WindowsPerformanceFacadexxxnet.sf.jni4net.inj.INJEnv __env, long __handle) {
            superxxx__env, __handle);
    }
    
    protected WindowsPerformanceFacadexxx) {
            superxxxxxxxxxnet.sf.jni4net.inj.INJEnv)xxxnull)), 0);
    }
    
    @net.sf.jni4net.attributes.ClrMethodxxx"xxx)J")
    public native static long StopwatchTimestampxxx);
    
    /**
     * Modify the specified counter by 1
     * Increment any paired base counter by 1
     * @param counterKey a counter identifier retrieved from GetPerformanceCounterId
     */
    @net.sf.jni4net.attributes.ClrMethodxxx"xxxI)V")
    public native static void Incrementxxxint counterKey);
    
    /**
     * Increment the specified counter by the specified amount.
     * Increment any paired base counter by 1
     * @param counterKey a counter identifier retrieved from GetPerformanceCounterId
     * @param incrementAmount the amount to increment a counter
     */
    @net.sf.jni4net.attributes.ClrMethodxxx"xxxIJ)V")
    public native static void IncrementByxxxint counterKey, long incrementAmount);
    
    /**
     * Increment the specified counter by the specified amount.
     * Increment any paired base counter by the specified amount
     * @param counterKey a counter identifier retrieved from GetPerformanceCounterId
     * @param incrementAmount the amount to increment a counter
     * @param incrementBaseAmount the amount to increment the base counter
     */
    @net.sf.jni4net.attributes.ClrMethodxxx"xxxIJJ)V")
    public native static void IncrementByxxxint counterKey, long incrementAmount, long incrementBaseAmount);
    
    /**
     * Modify the specified counter by 1
     * Increment any paired base counter by 1
     * @param counterKey a counter identifier retrieved from GetPerformanceCounterId
     */
    @net.sf.jni4net.attributes.ClrMethodxxx"xxxI)V")
    public native static void Decrementxxxint counterKey);
    
    /**
     * Retrieve the calcuated value of this counter
     * @param counterKey a counter identifier retrieved from GetPerformanceCounterId
     */
    @net.sf.jni4net.attributes.ClrMethodxxx"xxxI)F")
    public native static float NextValuexxxint counterKey);
    
    /**
     * Increment the specified counter by the specified amount.
     * Increment any paired base counter by 1
     * @param counterKey a counter identifier retrieved from GetPerformanceCounterId
     * @param incrementAmount the amount to increment a counter
     */
    @net.sf.jni4net.attributes.ClrMethodxxx"xxxIJ)V")
    public native static void SetRawValuexxxint counterKey, long value);
    
    @net.sf.jni4net.attributes.ClrMethodxxx"xxxI)J")
    public native static long GetRawValuexxxint counterKey);
    
    /**
     * Creates proxies for the requested counter. This only needs to be done once per counter.
     * This is a very slow, almost 400ms, operation.  Do it in setup if you do not want a first time hit.
     * @param categoryName the name of the category
     * @param instanceName the optional name of the instance. You can pass null or empty string for default instance
     * @param counterName the name of the counter
     */
    /**
     * Creates proxies for the requested counter. This only needs to be done once per counter.
     * This is a very slow, almost 400ms, operation.  Do it in setup if you do not want a first time hit.
     * @param categoryName the name of the category
     * @param instanceName the optional name of the instance. You can pass null or empty string for default instance
     * @param counterName the name of the counter
     */
    /**
     * Creates proxies for the requested counter. This only needs to be done once per counter.
     * This is a very slow, almost 400ms, operation.  Do it in setup if you do not want a first time hit.
     * @param categoryName the name of the category
     * @param instanceName the optional name of the instance. You can pass null or empty string for default instance
     * @param counterName the name of the counter
     */
    /**
     * Creates proxies for the requested counter. This only needs to be done once per counter.
     * This is a very slow, almost 400ms, operation.  Do it in setup if you do not want a first time hit.
     * @param categoryName the name of the category
     * @param instanceName the optional name of the instance. You can pass null or empty string for default instance
     * @param counterName the name of the counter
     */
    /**
     * Creates proxies for the requested counter. This only needs to be done once per counter.
     * This is a very slow, almost 400ms, operation.  Do it in setup if you do not want a first time hit.
     * @param categoryName the name of the category
     * @param instanceName the optional name of the instance. You can pass null or empty string for default instance
     * @param counterName the name of the counter
     */
    /**
     * Creates proxies for the requested counter. This only needs to be done once per counter.
     * This is a very slow, almost 400ms, operation.  Do it in setup if you do not want a first time hit.
     * @param categoryName the name of the category
     * @param instanceName the optional name of the instance. You can pass null or empty string for default instance
     * @param counterName the name of the counter
     */
    /**
     * Creates proxies for the requested counter. This only needs to be done once per counter.
     * This is a very slow, almost 400ms, operation.  Do it in setup if you do not want a first time hit.
     * @param categoryName the name of the category
     * @param instanceName the optional name of the instance. You can pass null or empty string for default instance
     * @param counterName the name of the counter
     */
    /**
     * Creates proxies for the requested counter. This only needs to be done once per counter.
     * This is a very slow, almost 400ms, operation.  Do it in setup if you do not want a first time hit.
     * @param categoryName the name of the category
     * @param instanceName the optional name of the instance. You can pass null or empty string for default instance
     * @param counterName the name of the counter
     */
    /**
     * Creates proxies for the requested counter. This only needs to be done once per counter.
     * This is a very slow, almost 400ms, operation.  Do it in setup if you do not want a first time hit.
     * @param categoryName the name of the category
     * @param instanceName the optional name of the instance. You can pass null or empty string for default instance
     * @param counterName the name of the counter
     */
    /**
     * Creates proxies for the requested counter. This only needs to be done once per counter.
     * This is a very slow, almost 400ms, operation.  Do it in setup if you do not want a first time hit.
     * @param categoryName the name of the category
     * @param instanceName the optional name of the instance. You can pass null or empty string for default instance
     * @param counterName the name of the counter
     */
    @net.sf.jni4net.attributes.ClrMethodxxx"xxxLSystem/String;LSystem/String;)V")
    public native static void CacheCountersxxxjava.lang.String categoryName, java.lang.String instanceName);
    
    /**
     * Create a unique integer key to represent the category, instance and counter name combination.
     * @param categoryName the name of the category
     * @param instanceName the optional name of the instance. You can pass null or empty string for default instance
     * @param counterName the name of the counter
     * @return the unique id for this counter
     */
    /**
     * Create a unique integer key to represent the category, instance and counter name combination.
     * @param categoryName the name of the category
     * @param instanceName the optional name of the instance. You can pass null or empty string for default instance
     * @param counterName the name of the counter
     * @return the unique id for this counter
     */
    /**
     * Create a unique integer key to represent the category, instance and counter name combination.
     * @param categoryName the name of the category
     * @param instanceName the optional name of the instance. You can pass null or empty string for default instance
     * @param counterName the name of the counter
     * @return the unique id for this counter
     */
    /**
     * Create a unique integer key to represent the category, instance and counter name combination.
     * @param categoryName the name of the category
     * @param instanceName the optional name of the instance. You can pass null or empty string for default instance
     * @param counterName the name of the counter
     * @return the unique id for this counter
     */
    /**
     * Create a unique integer key to represent the category, instance and counter name combination.
     * @param categoryName the name of the category
     * @param instanceName the optional name of the instance. You can pass null or empty string for default instance
     * @param counterName the name of the counter
     * @return the unique id for this counter
     */
    /**
     * Create a unique integer key to represent the category, instance and counter name combination.
     * @param categoryName the name of the category
     * @param instanceName the optional name of the instance. You can pass null or empty string for default instance
     * @param counterName the name of the counter
     * @return the unique id for this counter
     */
    /**
     * Create a unique integer key to represent the category, instance and counter name combination.
     * @param categoryName the name of the category
     * @param instanceName the optional name of the instance. You can pass null or empty string for default instance
     * @param counterName the name of the counter
     * @return the unique id for this counter
     */
    /**
     * Create a unique integer key to represent the category, instance and counter name combination.
     * @param categoryName the name of the category
     * @param instanceName the optional name of the instance. You can pass null or empty string for default instance
     * @param counterName the name of the counter
     * @return the unique id for this counter
     */
    /**
     * Create a unique integer key to represent the category, instance and counter name combination.
     * @param categoryName the name of the category
     * @param instanceName the optional name of the instance. You can pass null or empty string for default instance
     * @param counterName the name of the counter
     * @return the unique id for this counter
     */
    /**
     * Create a unique integer key to represent the category, instance and counter name combination.
     * @param categoryName the name of the category
     * @param instanceName the optional name of the instance. You can pass null or empty string for default instance
     * @param counterName the name of the counter
     * @return the unique id for this counter
     */
    @net.sf.jni4net.attributes.ClrMethodxxx"xxxLSystem/String;LSystem/String;LSystem/String;)I")
    public native static int GetPerformanceCounterIdxxxjava.lang.String categoryName, java.lang.String instanceName, java.lang.String counterName);
    
    public static system.Type typeofxxx) {
        return freemansoft.performancecounters.WindowsPerformanceFacade.staticType;
    }
    
    private static void InitJNIxxxnet.sf.jni4net.inj.INJEnv env, system.Type staticType) {
        freemansoft.performancecounters.WindowsPerformanceFacade.staticType = staticType;
    }
    //</generated-proxy>
}





